using System.Collections.Generic;
using System.IO;
using UnityEngine;

namespace GAS.Editor
{
    [FilePath("ProjectSettings/GameplayAttributeAsset.asset")]
    public class GameplayAttributeAsset : ScriptableSingleton<GameplayAttributeAsset>
    {
        [System.Serializable]   
        public class AttributeInfo
        { 
            public string name; 
            public string description;
        }

        public List<AttributeInfo> attributeInfos = new List<AttributeInfo>(0);

        public bool AddAttribute(string attributeName, string desc = "")
        {
            foreach (AttributeInfo attr in attributeInfos)
            {
                if (attr.name == attributeName)
                    return false;
            }
            attributeInfos.Add(new AttributeInfo() { name = attributeName, description = desc});
            return true;
        }


        public void RemoveAt(int index)
        {
            if (index < 0 || index >= attributeInfos.Count)
                return;

            attributeInfos.RemoveAt(index); 
        }

        public const string c_AttributeGenFile = "GameplayAttributeLib.cs";

        public static void Gen(string filePath = null)
        {
            if (string.IsNullOrEmpty(filePath))
                return;

            var asset = LoadOrCreate();

            var fullName = filePath + "/" + c_AttributeGenFile;

            using var writer = new IndentedWriter(new StreamWriter(fullName));
            writer.WriteLine("///////////////////////////////////");
            writer.WriteLine("//// This is a generated file. ////");
            writer.WriteLine("////     Do not modify it.     ////");
            writer.WriteLine("////       Generated by        ////");
            writer.WriteLine("////GameplayAttributeAsset.Gen.////");
            writer.WriteLine("///////////////////////////////////");

            writer.WriteLine("");

            writer.WriteLine("using System.Collections.Generic;");

            writer.WriteLine("");

            writer.WriteLine("namespace GAS.Runtime");
            writer.WriteLine("{");
            writer.Indent++;
            {
                writer.WriteLine("public static class GameplayAttributeLib");
                writer.WriteLine("{");
                writer.Indent++;
                {
                    foreach (var info in asset.attributeInfos)
                    {
                        writer.WriteLine("/// <summary>");
                        writer.WriteLine($"/// {info.description}");
                        writer.WriteLine("/// </summary>");
                        writer.WriteLine($"public const string {info.name} = \"{info.name}\";");
                        writer.WriteLine("");
                    }

                    writer.WriteLine("/// <summary>");
                    writer.WriteLine("/// 所有的属性列表");
                    writer.WriteLine("/// </summary>");
                    writer.WriteLine("public static List<string> AttributeNames = new List<string>()");
                    writer.WriteLine("{");
                    writer.Indent++;
                    {
                        foreach (var info in asset.attributeInfos)
                        {
                            writer.WriteLine($"{info.name},");
                        }
                    }
                    writer.Indent--;
                    writer.WriteLine("};");
                }
                writer.Indent--;
                writer.Write("}");
            }
            writer.Indent--;
            writer.Write("}");

            Debug.Log("GameplayAttributeGen Gen Success!");

        }

    }
}
