using GAS.Runtime;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

namespace GAS.Editor
{
    [FilePath("ProjectSettings/GameplayAttributeSetAsset.asset")]
    public class GameplayAttributeSetAsset : ScriptableSingleton<GameplayAttributeSetAsset>
    {
        [System.Serializable]
        public class AttributeSetInfo
        {
            public string setName;

            public List<AttributeInfo> attributes = new List<AttributeInfo>();

        }

        [System.Serializable]
        public class AttributeInfo
        {
            public string attributeName;

            public int attributeIndex;
        }

        public List<AttributeSetInfo> attributeSets = new List<AttributeSetInfo>();


        public const string c_AttributeSetGenFile = "GameplayAttributeSetLib.cs";

        public static void Gen(string filePath = null)
        {
            if (string.IsNullOrEmpty(filePath))
                return;

            var asset = LoadOrCreate();

            var fullName = filePath + "/" + c_AttributeSetGenFile;

            using var writer = new IndentedWriter(new StreamWriter(fullName));
            writer.WriteLine("///////////////////////////////////");
            writer.WriteLine("//// This is a generated file. ////");
            writer.WriteLine("////     Do not modify it.     ////");
            writer.WriteLine("////       Generated by        ////");
            writer.WriteLine("//GameplayAttributeSetAsset.Gen.////");
            writer.WriteLine("///////////////////////////////////");

            writer.WriteLine("");

            writer.WriteLine("using System;");
            writer.WriteLine("using System.Collections.Generic;");

            writer.WriteLine("");

            writer.WriteLine("namespace GAS.Runtime");
            writer.WriteLine("{");
            writer.Indent++;
            {
                writer.WriteLine("public static class GameplayAttributeSetLib");
                writer.WriteLine("{");
                writer.Indent++;
                {
                    foreach (var set in asset.attributeSets)
                    {
                        writer.WriteLine($"public class {set.setName.Trim()} : GameplayAttributeSet");
                        writer.WriteLine("{");
                        writer.Indent++;
                        {
                            foreach (var attr in set.attributes)
                            {
                                writer.WriteLine($"private readonly GameplayAttribute m_{attr.attributeName} = new GameplayAttribute(\"{set.setName.Trim()}\", \"{attr.attributeName}\");");
                                writer.WriteLine($"public GameplayAttribute {attr.attributeName}  {{ get {{ return m_{attr.attributeName}; }} }}");
                                writer.WriteLine("");
                            }

                            writer.WriteLine("");

                            writer.WriteLine("private readonly string[] m_AttributeNames = new string[]");
                            writer.WriteLine("{");
                            writer.Indent++;
                            {
                                foreach (var attr in set.attributes)
                                    writer.WriteLine($"\"{attr.attributeName}\",");
                            }
                            writer.Indent--;
                            writer.WriteLine("};");

                            writer.WriteLine("");

                            writer.WriteLine("public override string[] AttributeNames { get { return m_AttributeNames; } }");

                            writer.WriteLine("");

                            writer.WriteLine("public override GameplayAttribute this[string name]");
                            writer.WriteLine("{");
                            writer.Indent++;
                            {
                                writer.WriteLine("get");
                                writer.WriteLine("{");
                                writer.Indent++;
                                {
                                    writer.WriteLine("switch (name)");
                                    writer.WriteLine("{");
                                    writer.Indent++;
                                    {
                                        foreach(var attr in set.attributes)
                                        {
                                            writer.WriteLine($"case \"{attr.attributeName}\":");
                                            writer.Indent++;
                                            writer.WriteLine($"return {attr.attributeName};");
                                            writer.Indent--;
                                        }

                                        writer.WriteLine("default:");
                                        writer.Indent++;
                                        writer.WriteLine("return null;");
                                        writer.Indent--;
                                    }
                                    writer.Indent--;
                                    writer.WriteLine("}");
                                }
                                writer.Indent--;
                                writer.WriteLine("}");
                            }
                            writer.Indent--;
                            writer.WriteLine("}");
                        }
                        writer.Indent--;
                        writer.WriteLine("}");

                        writer.WriteLine("");
                    }

                    writer.WriteLine("");

                    writer.WriteLine("public static Dictionary<string, Type> AttributeSetMap = new Dictionary<string, Type>()");
                    writer.WriteLine("{");
                    writer.Indent++;
                    {
                        foreach (var set in asset.attributeSets)
                            writer.WriteLine($"[\"{set.setName.Trim()}\"] = typeof({set.setName.Trim()}),");
                    }
                    writer.Indent--;
                    writer.WriteLine("};");
                }
                writer.Indent--;
                writer.WriteLine("}");
            }
            writer.Indent--;
            writer.WriteLine("}");

            Debug.Log("GameplayAttributeSetAsset Gen Success!");

        }
    }
}
