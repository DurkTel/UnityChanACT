using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

namespace GAS.Editor
{
    [FilePath("ProjectSettings/GameplayTagsAsset.asset")]
    public class GameplayTagsAsset : ScriptableSingleton<GameplayTagsAsset>
    {
        [Serializable]
        public class GameplayTagNode
        {
            public string name;

            public string fullName;

            public string description;

            public List<GameplayTagNode> childs;

            public GameplayTagNode(string name, string fullName)
            {
                this.name = name;
                this.fullName = fullName;
                childs = new List<GameplayTagNode>(0);
            }

            public GameplayTagNode(string name, string fullName, string description) : this(name, fullName)
            {
                this.description = description;
            }

            public void AddChild(GameplayTagNode node)
            {
                childs.Add(node);
            }

        }

        public GameplayTagNode RootNode = new GameplayTagNode("", "");

        public const string c_TagGenFile = "GameplayTagsLib.cs";

        public static void Gen(string filePath = null)
        {
            if (string.IsNullOrEmpty(filePath))
                return;

            var asset = LoadOrCreate();

            var fullName = filePath + "/" + c_TagGenFile;

            using var writer = new IndentedWriter(new StreamWriter(fullName));
            writer.WriteLine("///////////////////////////////////");
            writer.WriteLine("//// This is a generated file. ////");
            writer.WriteLine("////     Do not modify it.     ////");
            writer.WriteLine("////       Generated by        ////");
            writer.WriteLine("////   GameplayTagsAsset.Gen.  ////");
            writer.WriteLine("///////////////////////////////////");

            writer.WriteLine("");

            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine("using LGameFramework.GameBase;");

            writer.WriteLine("");

            writer.WriteLine("namespace GAS.Runtime");
            writer.WriteLine("{");
            writer.Indent++;
            {
                writer.WriteLine("public static class GameplayTagsLib");
                writer.WriteLine("{");
                writer.Indent++;
                {
                    Stack<GameplayTagNode> waitWrite = new Stack<GameplayTagNode>();
                    waitWrite.Push(asset.RootNode);
                    List<(string, string)> markTuple = new List<(string, string)>();

                    GameplayTagNode current;
                    while (waitWrite.Count > 0)
                    {
                        current = waitWrite.Pop();

                        var allName1 = current.fullName;
                        if (!string.IsNullOrEmpty(allName1) && allName1 != "Root")
                        {
                            var allName2 = allName1.Replace('.', '_');
                            writer.WriteLine($"private static GameplayTag s_{allName2} = new GameplayTag(\"{allName1}\");");
                            writer.WriteLine("/// <summary>");
                            writer.WriteLine($"/// {current.description}");
                            writer.WriteLine("/// </summary>");
                            writer.WriteLine($"public static GameplayTag {allName2} {{ get {{ return s_{allName2}; }} }}");

                            writer.WriteLine("");
                            markTuple.Add((allName1, allName2));
                        }

                        if (current.childs.Count == 0)
                            continue;

                        foreach (var child in current.childs)
                            waitWrite.Push(child);
                    }

                    writer.WriteLine("");

                    writer.WriteLine("/// <summary>");
                    writer.WriteLine("/// ±Í«©Map");
                    writer.WriteLine("/// </summary>");
                    writer.WriteLine("public static Dictionary<string, GameplayTag> TagMap = new Dictionary<string, GameplayTag>");
                    writer.WriteLine("{");
                    writer.Indent++;
                    {
                        foreach (var tuple in markTuple)
                        {
                            writer.WriteLine($"[\"{tuple.Item1}\"] = {tuple.Item2},");
                        }
                    }
                    writer.Indent--;
                    writer.WriteLine("};");
                }
                writer.Indent--;
                writer.WriteLine("}");
            }
            writer.Indent--;
            writer.Write("}");

            Debug.Log("GameplayTagsGen Gen Success!");
        }
    }
}
