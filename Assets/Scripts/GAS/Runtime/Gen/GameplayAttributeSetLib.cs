///////////////////////////////////
//// This is a generated file. ////
////     Do not modify it.     ////
////       Generated by        ////
//GameplayAttributeSetAsset.Gen.////
///////////////////////////////////

using System;
using System.Collections.Generic;

namespace GAS.Runtime
{
    public static class GameplayAttributeSetLib
    {
        public class Locomotion : GameplayAttributeSet
        {
            private readonly GameplayAttribute m_RotateSpeed = new GameplayAttribute("Locomotion", "RotateSpeed");
            public GameplayAttribute RotateSpeed  { get { return m_RotateSpeed; } }

            private readonly GameplayAttribute m_MoveSpeed = new GameplayAttribute("Locomotion", "MoveSpeed");
            public GameplayAttribute MoveSpeed  { get { return m_MoveSpeed; } }

            private readonly GameplayAttribute m_TiltAngle = new GameplayAttribute("Locomotion", "TiltAngle");
            public GameplayAttribute TiltAngle  { get { return m_TiltAngle; } }

            private readonly GameplayAttribute m_TiltSpeed = new GameplayAttribute("Locomotion", "TiltSpeed");
            public GameplayAttribute TiltSpeed  { get { return m_TiltSpeed; } }

            private readonly GameplayAttribute m_AngularVelocity = new GameplayAttribute("Locomotion", "AngularVelocity");
            public GameplayAttribute AngularVelocity  { get { return m_AngularVelocity; } }

            private readonly GameplayAttribute m_TargetDeg = new GameplayAttribute("Locomotion", "TargetDeg");
            public GameplayAttribute TargetDeg  { get { return m_TargetDeg; } }


            private readonly string[] m_AttributeNames = new string[]
            {
                "RotateSpeed",
                "MoveSpeed",
                "TiltAngle",
                "TiltSpeed",
                "AngularVelocity",
                "TargetDeg",
            };

            public override string[] AttributeNames { get { return m_AttributeNames; } }

            public override GameplayAttribute this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "RotateSpeed":
                            return RotateSpeed;
                        case "MoveSpeed":
                            return MoveSpeed;
                        case "TiltAngle":
                            return TiltAngle;
                        case "TiltSpeed":
                            return TiltSpeed;
                        case "AngularVelocity":
                            return AngularVelocity;
                        case "TargetDeg":
                            return TargetDeg;
                        default:
                            return null;
                    }
                }
            }
        }

        public class Weapon : GameplayAttributeSet
        {
            private readonly GameplayAttribute m_AttackPow = new GameplayAttribute("Weapon", "AttackPow");
            public GameplayAttribute AttackPow  { get { return m_AttackPow; } }

            private readonly GameplayAttribute m_Durability = new GameplayAttribute("Weapon", "Durability");
            public GameplayAttribute Durability  { get { return m_Durability; } }

            private readonly GameplayAttribute m_Defense = new GameplayAttribute("Weapon", "Defense");
            public GameplayAttribute Defense  { get { return m_Defense; } }

            private readonly GameplayAttribute m_CriticalHitRate = new GameplayAttribute("Weapon", "CriticalHitRate");
            public GameplayAttribute CriticalHitRate  { get { return m_CriticalHitRate; } }

            private readonly GameplayAttribute m_CriticalHitPow = new GameplayAttribute("Weapon", "CriticalHitPow");
            public GameplayAttribute CriticalHitPow  { get { return m_CriticalHitPow; } }


            private readonly string[] m_AttributeNames = new string[]
            {
                "AttackPow",
                "Durability",
                "Defense",
                "CriticalHitRate",
                "CriticalHitPow",
            };

            public override string[] AttributeNames { get { return m_AttributeNames; } }

            public override GameplayAttribute this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "AttackPow":
                            return AttackPow;
                        case "Durability":
                            return Durability;
                        case "Defense":
                            return Defense;
                        case "CriticalHitRate":
                            return CriticalHitRate;
                        case "CriticalHitPow":
                            return CriticalHitPow;
                        default:
                            return null;
                    }
                }
            }
        }

        public class Fight : GameplayAttributeSet
        {
            private readonly GameplayAttribute m_AttackPow = new GameplayAttribute("Fight", "AttackPow");
            public GameplayAttribute AttackPow  { get { return m_AttackPow; } }

            private readonly GameplayAttribute m_Defense = new GameplayAttribute("Fight", "Defense");
            public GameplayAttribute Defense  { get { return m_Defense; } }

            private readonly GameplayAttribute m_HP = new GameplayAttribute("Fight", "HP");
            public GameplayAttribute HP  { get { return m_HP; } }

            private readonly GameplayAttribute m_CriticalHitRate = new GameplayAttribute("Fight", "CriticalHitRate");
            public GameplayAttribute CriticalHitRate  { get { return m_CriticalHitRate; } }

            private readonly GameplayAttribute m_CriticalHitPow = new GameplayAttribute("Fight", "CriticalHitPow");
            public GameplayAttribute CriticalHitPow  { get { return m_CriticalHitPow; } }

            private readonly GameplayAttribute m_Level = new GameplayAttribute("Fight", "Level");
            public GameplayAttribute Level  { get { return m_Level; } }

            private readonly GameplayAttribute m_Penetrating = new GameplayAttribute("Fight", "Penetrating");
            public GameplayAttribute Penetrating  { get { return m_Penetrating; } }

            private readonly GameplayAttribute m_ReduceDefense = new GameplayAttribute("Fight", "ReduceDefense");
            public GameplayAttribute ReduceDefense  { get { return m_ReduceDefense; } }

            private readonly GameplayAttribute m_DamageBonus = new GameplayAttribute("Fight", "DamageBonus");
            public GameplayAttribute DamageBonus  { get { return m_DamageBonus; } }

            private readonly GameplayAttribute m_MaxHP = new GameplayAttribute("Fight", "MaxHP");
            public GameplayAttribute MaxHP  { get { return m_MaxHP; } }


            private readonly string[] m_AttributeNames = new string[]
            {
                "AttackPow",
                "Defense",
                "HP",
                "CriticalHitRate",
                "CriticalHitPow",
                "Level",
                "Penetrating",
                "ReduceDefense",
                "DamageBonus",
                "MaxHP",
            };

            public override string[] AttributeNames { get { return m_AttributeNames; } }

            public override GameplayAttribute this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "AttackPow":
                            return AttackPow;
                        case "Defense":
                            return Defense;
                        case "HP":
                            return HP;
                        case "CriticalHitRate":
                            return CriticalHitRate;
                        case "CriticalHitPow":
                            return CriticalHitPow;
                        case "Level":
                            return Level;
                        case "Penetrating":
                            return Penetrating;
                        case "ReduceDefense":
                            return ReduceDefense;
                        case "DamageBonus":
                            return DamageBonus;
                        case "MaxHP":
                            return MaxHP;
                        default:
                            return null;
                    }
                }
            }
        }


        public static Dictionary<string, Type> AttributeSetMap = new Dictionary<string, Type>()
        {
            ["Locomotion"] = typeof(Locomotion),
            ["Weapon"] = typeof(Weapon),
            ["Fight"] = typeof(Fight),
        };
    }
}
