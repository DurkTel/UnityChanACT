///////////////////////////////////
//// This is a generated file. ////
////     Do not modify it.     ////
////       Generated by        ////
//GameplayAttributeSetAsset.Gen.////
///////////////////////////////////

using System;
using System.Collections.Generic;

namespace GAS.Runtime
{
    public static class GameplayAttributeSetLib
    {
        public class Locomotion : GameplayAttributeSet
        {
            private readonly GameplayAttribute m_RotateSpeed = new GameplayAttribute("Locomotion", "RotateSpeed");
            public GameplayAttribute RotateSpeed  { get { return m_RotateSpeed; } }

            private readonly GameplayAttribute m_MoveSpeed = new GameplayAttribute("Locomotion", "MoveSpeed");
            public GameplayAttribute MoveSpeed  { get { return m_MoveSpeed; } }

            private readonly GameplayAttribute m_TiltAngle = new GameplayAttribute("Locomotion", "TiltAngle");
            public GameplayAttribute TiltAngle  { get { return m_TiltAngle; } }

            private readonly GameplayAttribute m_TiltSpeed = new GameplayAttribute("Locomotion", "TiltSpeed");
            public GameplayAttribute TiltSpeed  { get { return m_TiltSpeed; } }

            private readonly GameplayAttribute m_AngularVelocity = new GameplayAttribute("Locomotion", "AngularVelocity");
            public GameplayAttribute AngularVelocity  { get { return m_AngularVelocity; } }

            private readonly GameplayAttribute m_TargetDeg = new GameplayAttribute("Locomotion", "TargetDeg");
            public GameplayAttribute TargetDeg  { get { return m_TargetDeg; } }


            private readonly string[] m_AttributeNames = new string[]
            {
                "RotateSpeed",
                "MoveSpeed",
                "TiltAngle",
                "TiltSpeed",
                "AngularVelocity",
                "TargetDeg",
            };

            public override string[] AttributeNames { get { return m_AttributeNames; } }

            public override GameplayAttribute this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "RotateSpeed":
                            return RotateSpeed;
                        case "MoveSpeed":
                            return MoveSpeed;
                        case "TiltAngle":
                            return TiltAngle;
                        case "TiltSpeed":
                            return TiltSpeed;
                        case "AngularVelocity":
                            return AngularVelocity;
                        case "TargetDeg":
                            return TargetDeg;
                        default:
                            return null;
                    }
                }
            }
        }

        public class Fight : GameplayAttributeSet
        {
            private readonly GameplayAttribute m_HP = new GameplayAttribute("Fight", "HP");
            public GameplayAttribute HP  { get { return m_HP; } }

            private readonly GameplayAttribute m_MP = new GameplayAttribute("Fight", "MP");
            public GameplayAttribute MP  { get { return m_MP; } }

            private readonly GameplayAttribute m_AttackPow = new GameplayAttribute("Fight", "AttackPow");
            public GameplayAttribute AttackPow  { get { return m_AttackPow; } }


            private readonly string[] m_AttributeNames = new string[]
            {
                "HP",
                "MP",
                "AttackPow",
            };

            public override string[] AttributeNames { get { return m_AttributeNames; } }

            public override GameplayAttribute this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "HP":
                            return HP;
                        case "MP":
                            return MP;
                        case "AttackPow":
                            return AttackPow;
                        default:
                            return null;
                    }
                }
            }
        }


        public static Dictionary<string, Type> AttributeSetMap = new Dictionary<string, Type>()
        {
            ["Locomotion"] = typeof(Locomotion),
            ["Fight"] = typeof(Fight),
        };
    }
}
