///////////////////////////////////
//// This is a generated file. ////
////     Do not modify it.     ////
////       Generated by        ////
///////MessageGenerate.Gen.////////
///////////////////////////////////


using System;
using GameMessage;
using Google.Protobuf;
using LGameFramework.GameNet;

namespace GameNet
{
    public static class IPlayer
    {

        #region CreatePlayer Interface Begin
        private static ByteBuffer CreatePlayerInternal(string playerName)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IPlayer.CreatePlayer".ToByteArray();
            var identityLen = identityArr.Length;
            var playerNameArr = playerName.ToByteArray();
			var playerNameLen = playerNameArr.Length;;
			
            int bodyLen = identityLen + playerNameLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(playerNameArr);
			

            return buffer;
        }

        public static void CreatePlayer(string playerName, Action<int> response)
        {
            void IPlayer_CreatePlayer_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                var uid = buffer.ReadInt();
				
                response.Invoke(uid);
            }

            ByteBuffer buffer = CreatePlayerInternal(playerName);
            NetworkUtility.Send(buffer, IPlayer_CreatePlayer_response);
        }

        public static void CreatePlayerAsyn(string playerName, Action<int> response)
        {
            void IPlayer_CreatePlayer_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                var uid = buffer.ReadInt();
				
                response.Invoke(uid);
            }

            ByteBuffer buffer = CreatePlayerInternal(playerName);
            NetworkUtility.SendAsyn(buffer, IPlayer_CreatePlayer_response);
        }
        #endregion CreatePlayer Interface End

        #region DeletePlayer Interface Begin
        private static ByteBuffer DeletePlayerInternal(int uid)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IPlayer.DeletePlayer".ToByteArray();
            var identityLen = identityArr.Length;
            var uidArr = uid.ToByteArray();
			var uidLen = uidArr.Length;;
			
            int bodyLen = identityLen + uidLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(uidArr);
			

            return buffer;
        }

        public static void DeletePlayer(int uid, Action response)
        {
            void IPlayer_DeletePlayer_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = DeletePlayerInternal(uid);
            NetworkUtility.Send(buffer, IPlayer_DeletePlayer_response);
        }

        public static void DeletePlayerAsyn(int uid, Action response)
        {
            void IPlayer_DeletePlayer_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = DeletePlayerInternal(uid);
            NetworkUtility.SendAsyn(buffer, IPlayer_DeletePlayer_response);
        }
        #endregion DeletePlayer Interface End
    }
}
