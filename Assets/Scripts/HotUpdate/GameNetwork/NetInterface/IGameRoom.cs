///////////////////////////////////
//// This is a generated file. ////
////     Do not modify it.     ////
////       Generated by        ////
///////MessageGenerate.Gen.////////
///////////////////////////////////


using System;
using GameMessage;
using Google.Protobuf;
using LGameFramework.GameNet;

namespace GameNet
{
    public static class IGameRoom
    {

        #region CreateRoom Interface Begin
        private static ByteBuffer CreateRoomInternal(string roomName)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IGameRoom.CreateRoom".ToByteArray();
            var identityLen = identityArr.Length;
            var roomNameArr = roomName.ToByteArray();
			var roomNameLen = roomNameArr.Length;;
			
            int bodyLen = identityLen + roomNameLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(roomNameArr);
			

            return buffer;
        }

        public static void CreateRoom(string roomName, Action<int> response)
        {
            void IGameRoom_CreateRoom_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                var roomId = buffer.ReadInt();
				
                response.Invoke(roomId);
            }

            ByteBuffer buffer = CreateRoomInternal(roomName);
            NetworkUtility.Send(buffer, IGameRoom_CreateRoom_response);
        }

        public static void CreateRoomAsyn(string roomName, Action<int> response)
        {
            void IGameRoom_CreateRoom_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                var roomId = buffer.ReadInt();
				
                response.Invoke(roomId);
            }

            ByteBuffer buffer = CreateRoomInternal(roomName);
            NetworkUtility.SendAsyn(buffer, IGameRoom_CreateRoom_response);
        }
        #endregion CreateRoom Interface End

        #region GetRoomInfo Interface Begin
        private static ByteBuffer GetRoomInfoInternal(int roomId)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IGameRoom.GetRoomInfo".ToByteArray();
            var identityLen = identityArr.Length;
            var roomIdArr = roomId.ToByteArray();
			var roomIdLen = roomIdArr.Length;;
			
            int bodyLen = identityLen + roomIdLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(roomIdArr);
			

            return buffer;
        }

        public static void GetRoomInfo(int roomId, Action<GameRoomUpdateInfo> response)
        {
            void IGameRoom_GetRoomInfo_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                int roomInfoLen = buffer.ReadInt();
				var roomInfo = GameRoomUpdateInfo.Parser.ParseFrom(buffer.CacheBytes, buffer.ReadIndex, roomInfoLen);
				buffer.ReadIndex += roomInfoLen;
				
                response.Invoke(roomInfo);
            }

            ByteBuffer buffer = GetRoomInfoInternal(roomId);
            NetworkUtility.Send(buffer, IGameRoom_GetRoomInfo_response);
        }

        public static void GetRoomInfoAsyn(int roomId, Action<GameRoomUpdateInfo> response)
        {
            void IGameRoom_GetRoomInfo_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                int roomInfoLen = buffer.ReadInt();
				var roomInfo = GameRoomUpdateInfo.Parser.ParseFrom(buffer.CacheBytes, buffer.ReadIndex, roomInfoLen);
				buffer.ReadIndex += roomInfoLen;
				
                response.Invoke(roomInfo);
            }

            ByteBuffer buffer = GetRoomInfoInternal(roomId);
            NetworkUtility.SendAsyn(buffer, IGameRoom_GetRoomInfo_response);
        }
        #endregion GetRoomInfo Interface End

        #region GetAllRoomInfo Interface Begin
        private static ByteBuffer GetAllRoomInfoInternal()
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IGameRoom.GetAllRoomInfo".ToByteArray();
            var identityLen = identityArr.Length;

            int bodyLen = identityLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			

            return buffer;
        }

        public static void GetAllRoomInfo(Action<GameRoomAllInfo> response)
        {
            void IGameRoom_GetAllRoomInfo_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                int allRoomInfoLen = buffer.ReadInt();
				var allRoomInfo = GameRoomAllInfo.Parser.ParseFrom(buffer.CacheBytes, buffer.ReadIndex, allRoomInfoLen);
				buffer.ReadIndex += allRoomInfoLen;
				
                response.Invoke(allRoomInfo);
            }

            ByteBuffer buffer = GetAllRoomInfoInternal();
            NetworkUtility.Send(buffer, IGameRoom_GetAllRoomInfo_response);
        }

        public static void GetAllRoomInfoAsyn(Action<GameRoomAllInfo> response)
        {
            void IGameRoom_GetAllRoomInfo_response(byte[] bytes)
            {
                ByteBuffer buffer = new ByteBuffer(bytes);
                int allRoomInfoLen = buffer.ReadInt();
				var allRoomInfo = GameRoomAllInfo.Parser.ParseFrom(buffer.CacheBytes, buffer.ReadIndex, allRoomInfoLen);
				buffer.ReadIndex += allRoomInfoLen;
				
                response.Invoke(allRoomInfo);
            }

            ByteBuffer buffer = GetAllRoomInfoInternal();
            NetworkUtility.SendAsyn(buffer, IGameRoom_GetAllRoomInfo_response);
        }
        #endregion GetAllRoomInfo Interface End

        #region JoinRoom Interface Begin
        private static ByteBuffer JoinRoomInternal(int roomId)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IGameRoom.JoinRoom".ToByteArray();
            var identityLen = identityArr.Length;
            var roomIdArr = roomId.ToByteArray();
			var roomIdLen = roomIdArr.Length;;
			
            int bodyLen = identityLen + roomIdLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(roomIdArr);
			

            return buffer;
        }

        public static void JoinRoom(int roomId, Action response)
        {
            void IGameRoom_JoinRoom_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = JoinRoomInternal(roomId);
            NetworkUtility.Send(buffer, IGameRoom_JoinRoom_response);
        }

        public static void JoinRoomAsyn(int roomId, Action response)
        {
            void IGameRoom_JoinRoom_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = JoinRoomInternal(roomId);
            NetworkUtility.SendAsyn(buffer, IGameRoom_JoinRoom_response);
        }
        #endregion JoinRoom Interface End

        #region BeReady Interface Begin
        private static ByteBuffer BeReadyInternal(bool value, int roomId, int index)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IGameRoom.BeReady".ToByteArray();
            var identityLen = identityArr.Length;
            var valueArr = value.ToByteArray();
			var valueLen = valueArr.Length;;
			var roomIdArr = roomId.ToByteArray();
			var roomIdLen = roomIdArr.Length;;
			var indexArr = index.ToByteArray();
			var indexLen = indexArr.Length;;
			
            int bodyLen = identityLen + valueLen + roomIdLen + indexLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(valueArr);
			buffer.Write(roomIdArr);
			buffer.Write(indexArr);
			

            return buffer;
        }

        public static void BeReady(bool value, int roomId, int index, Action response)
        {
            void IGameRoom_BeReady_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = BeReadyInternal(value, roomId, index);
            NetworkUtility.Send(buffer, IGameRoom_BeReady_response);
        }

        public static void BeReadyAsyn(bool value, int roomId, int index, Action response)
        {
            void IGameRoom_BeReady_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = BeReadyInternal(value, roomId, index);
            NetworkUtility.SendAsyn(buffer, IGameRoom_BeReady_response);
        }
        #endregion BeReady Interface End

        #region StartGame Interface Begin
        private static ByteBuffer StartGameInternal(int roomId)
        {
            var msgIdArr = MessageSender.SendID.ToByteArray();
            var msgIdLen = msgIdArr.Length;
            var identityArr = "IGameRoom.StartGame".ToByteArray();
            var identityLen = identityArr.Length;
            var roomIdArr = roomId.ToByteArray();
			var roomIdLen = roomIdArr.Length;;
			
            int bodyLen = identityLen + roomIdLen;
            var bodyLenArr = bodyLen.ToByteArray();
            int len = msgIdLen + 4 + bodyLen;
            ByteBuffer buffer = new ByteBuffer(len);
            buffer.Write(msgIdArr);
			buffer.Write(bodyLenArr);
			buffer.Write(identityArr);
			buffer.Write(roomIdArr);
			

            return buffer;
        }

        public static void StartGame(int roomId, Action response)
        {
            void IGameRoom_StartGame_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = StartGameInternal(roomId);
            NetworkUtility.Send(buffer, IGameRoom_StartGame_response);
        }

        public static void StartGameAsyn(int roomId, Action response)
        {
            void IGameRoom_StartGame_response(byte[] bytes)
            {

                response.Invoke();
            }

            ByteBuffer buffer = StartGameInternal(roomId);
            NetworkUtility.SendAsyn(buffer, IGameRoom_StartGame_response);
        }
        #endregion StartGame Interface End
    }
}
